


// 대화상자 기반 응용 프로그램도 일반 GUI 응용 프로그램처럼 메시지 구동 방식으로 동작한다
// 따라서 소켓 코드를 별도의 스레드로 분리해야 하며, 대화상자 프로시저와 소켓 코드가 공유하는 데이터가 있을 경우에는 스레드 동기화 함수를 사용해 보호해야 한다

// 이 응용 프로그램은 스레드 두 개로 구성되어 있다
// 스레드 1은 윈도우 메시지 처리, 스레드 2는 소켓 통신을 담당한다
/*
	1. (스레드 1) 사용자가 편집 컨트롤에 글자를 입력한 후 <보내기> 버튼을 누른다
	2. (스레드 1) 편집 컨트롤에 입력된 문자열을 응용 프로그램 버퍼에 저장한다
	3. (스레드 2) 응용 프로그램 버퍼에 저장된 데이터를 에코(echo) 서버에 보낸다
	4. (스레드 2) 에코 서버가 보낸 데이터를 응용 프로그램 버퍼에 읽어들인다
	5. (스레드 2) 응용 프로그램 버퍼에 저장된 데이터를 편집 컨트롤에 출력한다
*/
// 이 응용 프로그램이 올바로 동작하는 데 필요한 조건을 생각해보자
// 먼저, 두 스레드가 응용 프로그램 버퍼를 공유하므로 임계 영역을 이용해 접근을 제한하면 문제가 없을 것 같다
// 하지만 이 방법으로는 올바른 동작을 보장하지 못한다
// 예를 들어 스레드 2가 3번 ~ 5번 을 실행한 후 다시 3번 ~ 5번 을 실행한다면 똑같은 데이터르 두 번 보내고 받게 된다
// 이런 경우에는 이벤트를 이용해 스레드 1이 2번을 수행한 후에만 스레드 2가 3번 ~ 5번을 실행하게 해야 한다

// 또한 사용자가 데이터를 아주 빠르게 입력하여 스레드 1이 1번 ~ 2번을 연속으로 두 번 실행하는 경우에도 문제가 발생할 수 있다
// 스레드 2가 데이터를 전송하기 전에 새로운 데이터로 덮어쓰기 때문이다
// 이 문제는 이벤트를 이용한 동기화 기법을 사용하거나, <보내기> 버튼을 비활성화 함으로써 버튼을 누르는 행위를 금지하는 방법으로 해결할 수 있다
// 실습 예제에서는 이벤트를 이용한 동기화와 버튼 비활성화 방법을 모두 사용할 것이다