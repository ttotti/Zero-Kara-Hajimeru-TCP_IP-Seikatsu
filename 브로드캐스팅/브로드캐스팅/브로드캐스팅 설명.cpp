

// 브로드캐스팅 설명

// TCP와 구별되는 UDP의 특징으로 브로드캐스팅과 멀티캐스티을 들 수 있다
// 이를 이용하면 다자 간의 통신을 쉽게 구현할 수 있다
// (브로드캐스팅과 멀티캐스팅은 엄밀하게 는 IP가 제공하는 기능이지만, 응용 프로그램 수준에서는 UDP를 사용해 구현하는 것이 일반적이다)

// 통신에 참여하는 개체 간 상호 작용을 송신자와 수신자의 개수에 따라 분류하면 다음과 같다 (그림은 책 246p를 참고)
/*
	1. 유니캐스팅 : 한 개체가 다른 한 개체에 데이터를 보내는 모델이다, IPv4 / IPv6에서 지원한다

	2. 브로드캐스팅 : 한 개체가 특정 네트워크(자신과 동일 네트워크도 가능)에 속한 모든 개체에 데이터를 보내는 모델이다, IPv4에서만 지원한다

	3. 멀티캐스팅 : 동일 그룹에 가입한 모든 개체(물리적으로는 서로 다른 네트워크에 속할 수 있음)에 데이터를 보내는 모델이다
                 개념적으로 브로드캐스팅은 멀티캐스팅의 특수한 경우로 볼 수 있다, IPv4 / IPv6에서 지원한다

	4. 애니캐스팅 : 한 개체가 동일 그룹에 가입한 개체 중 가장 가까운 하나에만 데이터를 보내면, 
				 데이터를 받은 개체가 그룹에 속한 나머지 개체에 데이터를 보내는 모델이다, IPv6에서만 지원한다
*/

// 브로드캐스팅 개념

// 브로드캐스팅은 송신자가 보낸 데이터 하나를 다수의 수신자가 받는 방식이다
// 데이터 복사본을 여러 개 만들어 보내는 것이 아니므로 송신자 관점에서 보면 상당히 효율적인 기술이라고 볼 수 있다

// 다음은 이더넷(Ethrenet)에서 브로드캐스팅 메시지를 보내는 상황을 나타낸 것이다
/*
	    수신자       송신자        수신자          수신자
		  ^            I            ^               ^
		  I            V            I               I
	<<------------------------------------------------------>> 
	            I             I            I
				V             V            V
	          수신자        수신자        수신자       
*/
// 송신자가 보내는 (하나의)메시지는 이더넷을 통해 모든 개체에 전달되고,
// 각 개체는 이 메시지가 브로드캐스트 주소로 보낸 것임을 확인하고 읽어들인다

// 소켓 응용 프로그램에서 브로드캐스트 데이터를 보내려면 다음 절차를 따라야한다
// 브로드캐스트 데이터를 받는 쪽에서는 프로토콜(예를 들면, UDP)과 포트 번호(예를 들면, 9000번)만 일치시키면 된다
/*
	1. 브로드캐스팅을 활성화한다

		BOOL bEnable = TRUE;
		retval = setsockopt(sock, SOL_SOCKET, SO_BROADCAST, (char*)&bEnable, sizeof(bEnable));
		if(retval == SOCKET_ERROR)
			err_quit("setsockopt()");

	socket() 함수로 생성한 소켓 디스크립터는 기본적으로 유니캐스팅만 가능하다,
	소켓 옵션 중 SO_BROADCAST를 사용하면 브로드캐스팅을 활성화할 수 있다

	setsockopt() 함수의 첫 번째 인자로 소켓,
						두 번째 인자와 세 번째 인자로 SOL_SOCKET 과 SO_BROADCATE를 전달한 상태에서
						네 번째 인자에 TRUE 값을 사용하면 해당 소켓에 대한 브로드캐스팅이 활성화되며, 이때부터 브로드캐스트 데이터를 보낼 수 있다

	2. 브로드캐스트 주소를 목적지로 해서 데이터를 보낸다

		// 소켓 주소 구조체를 초기화 한다
		SOCKADDR_IN remoteaddr;
		ZeroMemory(&remoteaddr, sizeof(remoteaddr));
		remoteaddr.sin_family = AF_INET;
		remoteaddr.sin_addr.s_addr = inet_addr("255.255.255.255");
		remoteaddr.sin_port = htons(9000);

		// 송신용 버퍼를 선언하고 데이터를 넣는다
		char buf[BUFSIZE];

		...

		// sendto() 함수로 데이터를 보낸다
		retval = sendto(sock, buf, strlen(buf), 0, (SOCKADDR*)&remoteaddr, sizeof(remoteaddr));
		if(retval == SOCKET_ERROR) 오류 처리
		printf("%d 바이트를 보냈습니다\n",retval);

	브로드캐스트 데이터를 보내는 코드는 IP 주소 부분을 제외하면 유니캐스트 데이터를 보내는 것과 동일하다
	따라서 브로드캐스트를 위한 IP 주소의 종류만 알면 된다
	IPv6에서는 브로드캐스팅을 지원하지 않으므로 IPv4 주소만 설명할 것이다
*/

// IPv4 주소는 크게 네트워크ID 와 호스트ID 로 나눌 수 있다.
// 서브넷을 사용하는 경우, 호스트ID 의 일부는 서브넷ID 로 사용된다.
// 브로드캐스팅용으로 예약되어 있는 IPv4 주소는 다음과 같다

/*
                        ------------호스트ID-------------
                        V                              V
          ---------------------------------------------- 
	      I  네트워크ID  I  11......................1  I     네트워크 브로드캐스트
		  ----------------------------------------------

		  ----------------------------------------------
		  I  네트워크ID  I   서브넷ID   I 11.........1  I    서브넷 브로드캐스트
		  ----------------------------------------------

		  ----------------------------------------------
		  I  11.....................................1  I    지역 브로드캐스트
		  ----------------------------------------------
*/

/*
	  1. 네트워크 브로드캐스트

                                          --------->> 수신자
										  I         
	   송신자 ----------> 라우터 -------------> 수신자                  
										  I	------------------------>> 수신자
										  --------------->> 수신자

==========================================================================================================================
      2. 서브넷 브로드캐스트
										         ----------------------------------------------
										         I   ----------------->> 수신자               I
										         I  I------------------------------>> 수신자  I
										     ----I------ ->> 수신자                           I
	                                         I   ----------------------------------------------
	   송신자 ----------> 라우터 -------------I                                               
	                                                 수신자                
													                      수신자
																수신자

==========================================================================================================================
      3. 지역 브로드캐스트

	   송신자와 같은 네트워크 수신자
					 ^									  -----------------------------
					 I									  I                           I
				   송신자 ----------> 라우터 --------------I           없음            I
					  I									  I                           I
					  ------------						  -----------------------------
					             I
								 V
	          송신자와 같은 네트워크 수신자
*/                                            

/*
	1, 네트워크 브로드캐스드(net-directed broadcast)

	- 호스트ID 비트가 모두 1인 경우로, 특정 네트워크에 대한 브로드캐스트를 의미한다
	  브로드캐스트 데이터가 라우터를 거쳐야 하므로 라우터 설정에 따라 브로드캐스팅이 불가능할 수도 있다
	  따라서 실용적으로 브로드캐스팅 주소로 사용하기는 어렵다

	2. 서브넷 브로드캐스드(subnet-directed broadcast)

	- 서브넷ID 를 제외한 호스트ID 비트가 모두 1인 경우로, 특정 서브넷에 대한 브로드캐스트를 의미한다
	  서브넷 브로드캐스트도 라우터를 통과하지 못할 수 있으므로, 일반적으로 외부 서브넷에 대한 브로드캐스팅을 목적으로 사용하기는 어렵다
	  하지만 송신자 자신이 속한 서브넷에 대한 브로드캐스팅은 항상 가능하다

	3. 지역 브로드캐스트(local broadcast 또는 limited broadcast)

	- 송신자 자신이 속한 네트워크에 대한 브로드캐스트를 의미한다
	  항상 브로드캐스팅이 가능하며, 브로드캐스트 데이터가 라우터 경계를 넘어가지 않는다
	  지역 브로드캐스트 주소는 ws2def.h 파일에 INADDR_BROADCAST(0xffffffff; 255.255.255.255) 값으로 정의 되어 있다
*/

// 브로드캐스트 실습

// UDP 소켓을 이용해 브로드캐스트 데이터를 보내는 프로그램과 받는 프로그램을 작성해보자
// 실습의 편의를 위해 지역 브로드캐스트 주소(255.255.255.255)를 사용할 것이다

// 두 응용 프로그램의 동작은 다음과 같다
/*
	1. 송신자 : 사용자가 키보드로 입력한 문자열을(fgets) 브로드캐스트 주소로 보낸다(sendto)

	2. 수신자 : 브로드캐스트 데이터를 받고(recvfrom), 이를 문자열로 간주해 무조건 화면에 출력한다(printf)

	fgets() --------> 송신자 --- sendto() ------- recvfrom() ---> 수신자 ---- printf() ---->>
*/