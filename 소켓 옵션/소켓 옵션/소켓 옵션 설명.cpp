

// 소켓 옵션

// 소켓 옵션의 종류와 관련 함수

// 소켓 프로그래밍은 소켓을 통해 TCP/IP, IrDA, Bluetooth 와 같은 통신 프로토콜의 기능을 이용하는 응용 프로그램을 작성하는 일이다
// 이 응용 프로그램은 소켓 코드가 제공하는 인터페이스인 소켓 함수를 사용하므로, 통신 프로토콜을 변경하더라도 기존 코드 수정을 최소화할 수 있다는 장점이 있다

/*
      		  I-------------------------------------I
	    	  I            응용 프로그램             I
		      I-------------------------------------I
		         ㅣ      ㅣ      ㅣ      ㅣ      ㅣ  
   소켓 코드 -->  ㅁ(소켓)ㅁ      ㅁ      ㅁ      ㅁ   
                 ㅣ      ㅣ      ㅣ      ㅣ      ㅣ   
   ------------- TCP    UDP      ㅣ      ㅣ      ㅣ
   I		     ㅣ      ㅣ      ㅣ      ㅣ      ㅣ
   I 프로토콜   	 ----------     IrDA    Blue    ...
   I			 I   IP   I      ㅣ     tooth    ㅣ 
   I 구현 코드   -----------      ㅣ      ㅣ      ㅣ
   I     	      I      I       I       I       I
   -------------  V      V       V       V       V

   (소켓 프로그래밍 모델)
*/

// 지금 까지 작성한 모든 응용 프로그램은 (브로드캐스팅 예제를 제외) 소켓의 동작 속성을 변경하지 않고 소켓 함수에 그대로 전달함으로써 구현했다
// 그러나 다양한 요구 사항이 있는 응용 프로그램을 작성하다 보면 같은 소켓 함수를 호출하더라도 소켓 코드나 프로토콜 구현 코드의 동작이 달라질 필요가 있다
// 소켓 옵션을 사용하면 소켓 함수의 기본 동작을 변경할 수 있으며, 이를 통해 소켓 코드와 프로토콜 구현 코드를 세부적으로 제어할 수 있다

// 소켓 옵션을 처리 주체에 따라 크게 두 종류로 구분할 수 있다
/*
	1. 소켓 코드가 처리하는 옵션
		- 옵션을 설정하면 소켓 코드에서 해석하고 처리한다
		  프로토콜 독립적인 성격이 있으나 옵션의 실제 적용 여부는 프로토콜 종류에 따라 달라진다 (2절에서 학습한다)

	2. 프로토콜 구현 코드가 처리하는 옵션
		- 옵션을 설정하면 프로토콜 구현 코드에서 해석하고 처리한다
		  프로토콜 의존적인 성격이 있으므로 프로토콜 종류에 따라 옵션 자체가 달라진다 (3절과 4절에서 각각 IP와 TCP 옵션을 학습한다)
*/

// 소켓 옵션을 설정할 때는 setsockopt() 함수를 사용한다
/*
	int setsockopt(
		SOCKET s,			// 옵션을 적용할 대상 소켓이다

		int level,			// 옵션을 해석하고 처리할 주체를 지시한다
							   예를 들어, 소켓 코드가 처리하면 SOL_SOCKET,
							   IPv4 프로토콜 코드가 처리하면 IPPROTO_IP, 
							   IPv6 프로토콜 코드가 처리하면 IPPROTO_IPV6, 
							   TCP 프로토콜 코드가 처리하면 IPPROTO_TCP 를 사용한다
							   옵션 이름이 정해지면 level 값은 자동으로 결정되므로 level별 옵션을 참조해 선택하면 된다 (인터넷, 책 262p 참고)

		int optname,        // 설정할 옵션의 이름이다

		const char* optval, // 설정할 옵션 값을 담고 있는 버퍼의 주소다, 옵션 값은 대부분 정수형이지만 구조체형인 경우도 있다

		int optlen			// optval이 가리키는 버퍼의 크기(바이트 단위)다
	);   성공 : 0,  실패 : SOCKET_ERROR
*/

// 현재 설정된 소켓 옵션 값을 얻을 때는 getsockopt() 함수를 사용한다
/*
	int getsockopt(
		SOCKET s,	  // 옵션 값을 얻을 대상 소켓이다

		int level,    // 옵션을 해석하고 처리할 주체를 지시한다,
					     예를 들어 소켓 코드가 처리하면 SOL_SOCKET, 
						 IPv4 프로토콜 코드가 처리하면 IPPROTO_IP, 
						 IPv6 프로토콜 코드가 처리하면 IPPROTO_IPV6, 
						 TCP 프로토콜 코드가 처리하면 IPPROTO_TCP 를 사용한다
						 옵션 이름이 정해지면 level 값은 자동으로 결정되므로 level별 옵션을 참조해 선택하면 된다 (인터넷, 책 262p 참고)

		int optname,  // 값을 얻을 옵션의 이름이다

		char* optval, // 얻은 옵션 값을 저장할 버퍼의 주소다, 옵션 값은 대부분 정수형이지만 구조체 형인 경우도 있다

		int* optlen   // 값 - 결과(value - result) 인자로 사용한다, 
						 함수 호출 전에는 optval이 가리키는 버퍼의 크기(바이트 단위)로 응용 프로그램에서 초기화 한다
						 함수 호출 후에는 얻은 옵션 값의 크기로 운영체제가 값을 채워준다
	);   성공 : 0,  실패 : SOCKET_ERROR
*/

// TCP/IP 와 관련해 레벨별로 다양한 옵션이 존재한다
// 인터넷, 책 262p 를 참고한다